<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[fflamingogo blog]]></title>
  <subtitle><![CDATA[the wind of freedom blows]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="fflamingogo.xyz/"/>
  <updated>2015-11-16T14:52:50.000Z</updated>
  <id>fflamingogo.xyz/</id>
  
  <author>
    <name><![CDATA[fflamingogo]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android开发必备vps 科学上网]]></title>
    <link href="fflamingogo.xyz/2015/11/09/Android%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87vps-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>fflamingogo.xyz/2015/11/09/Android开发必备vps-科学上网/</id>
    <published>2015-11-09T14:44:14.000Z</published>
    <updated>2015-11-16T14:52:50.000Z</updated>
    <content type="html"><![CDATA[<p>作为Android开发工程师，你是不是有以下的经历：</p>
<ul>
<li>无法访问谷歌</li>
<li>无法访问Android官网</li>
<li>Android studio更新各种失败</li>
<li>导入谷歌的库各种失败</li>
</ul>
<p>一切原因都是你身处大局域网中，你可能通过某种方法，暂时解决了以上的问题，但是还是很不顺心，这里，我不单要帮你解决以上的问题，还要带你看看世界。</p>
<a id="more"></a>
<p>#购买vps<br>虚拟专用服务器（英语：Virtual private server，缩写为 VPS），是指通过虚拟化技术在独立服务器中运行的专用服务器。每个使用VPS技术的虚拟独立服务器拥有各自独立的公网IP地址、操作系统、硬盘空间、内存空间、CPU资源等，还可以进行安装程序、重启服务器等操作，与运行一台独立服务器完全相同。</p>
<p>在vps上，我们不仅能实现科学上网，还能搭建自己的个人博客、搭建自己私人的git服务器，逼格很高有木有？还有很多功能等待我们去发掘，我将在之后的博客中介绍。因此我们应该挑选一个性能良好的vps，经过我试验后，我认为conoha是个不错的选择，支持中文、有东京机房、延迟低、1g内存、可以支付宝支付，最重要的是每个月只需900日元（折合人民币47元），很适合国内的Android开发工程师使用。</p>
<p><a href="https://www.conoha.jp/referral/?token=3WIDFgxrG6MsHRBJ7V_EI4GqOsP4UzCf.4cY9isnERXyDas77FQ-9LZ" target="_blank" rel="external">购买vps地址</a><br>点击右上角申请注册等步骤，这些谁都会的就不介绍了，但是要注意，密码貌似需要有<strong>标点符号！！！</strong></p>
<p>#注册</p>
<p><img src="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/1.png?raw=true" width="1000" height="350/"><br>点击右上角<code>申请</code>，出现登录账号的界面，其实这也是注册的界面，直接输入<code>邮箱</code>和<code>密码</code>。<br><img src="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/2.png?raw=true" width="1000" height="450/"><br>接下来选择<code>短信验证</code>，和普通的验证一样，就不多说了。<br><img src="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/3.png?raw=true" width="1000" height="550/"><br>然后填写信息，随便填填就好了。<br><img src="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/4.png?raw=true" width="1000" height="550/"><br>选择<code>Conoha CHarge</code>，里面可以选择支付宝支付。<br><img src="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/5.png?raw=true" width="1000" height="250/"><br>充值金额建议充<code>2000日元</code>，大概100人民币吧，然后选择支付宝，点击<code>前往支付宝</code>，之后的大家都会吧。</p>
<p>#创建服务器<br><img src="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/6.png?raw=true" width="1000" height="300/"></p>
<p>点击右上角<code>添加服务器</code>,只需换为<code>ubuntu</code>,输入<code>root密码</code>，最后点击<code>追加</code>即可创建成功。</p>
<p>#登录服务器</p>
<p>###windows系统<br>首先，我们先要连接上我们的vps,<code>windows</code>上可以下载<code>putty</code>，把我们获得的ip填入<code>Host Name</code>，点击<code>open</code>。<br><img src="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/12.png?raw=true" width="1000" height="500/"><br>弹出如下窗口，直接点击<code>是</code>。<br><img src="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/13.png?raw=true" width="1000" height="400/"><br>接着会出现终端窗口让你输入<code>login as</code>，输入<code>root</code>，然后<code>password</code>输入之前设置好的密码。<br><img src="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/14.jpg?raw=true" width="1000" height="400/"><br>如果出现下图显示，证明我们已经成功连接上vps了。</p>
<p><img src="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/15.png?raw=true" width="1000" height="300/"></p>
<p>###mac系统<br>舍得花钱买mac开发的，代表你对技术的重视，配置了<code>ssh-key</code>这些就不说了，不配置也可以，只是要输入账号<code>root</code>和之前设置的<code>root密码</code>。<br>输入<code>ssh root@133.130.108.22</code>(你输入你vps的ip)，出现如下界面表示成功连接。<br><img src="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/10.png?raw=true" width="1000" height="700/"></p>
<p>#搭建shadowsocks</p>
<p>首先我们应该感谢shadowsocks的作者。<br><a href="https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" target="_blank" rel="external">作者教程</a></p>
<blockquote>
<p>apt-get install python-pip</p>
</blockquote>
<p>pip是一个以Python计算机程序语言写成的软件包管理系统，他可以安装和管理软件包。之后我们下载安装东西就方便了。<br>现在，我们执行这个命令，终端刷刷刷的开始下载，中间会询问你，输入yes后继续。但是最后出现了个失败的信息，如下图：<br><img src="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/7.png?raw=true" width="1000" height="500/"><br>他要求我们执行<code>apt-get update</code>，输入后回车，完成更新后，再次执行<code>apt-get install python-pip</code>，这次很顺利的完成了安装。</p>
<blockquote>
<p>pip install shadowsocks</p>
</blockquote>
<p>接着我们用pip来安装shadowsocks，执行<code>pip install shadowsocks</code>，出现如下信息，代表我们成功安装了shadowsocks。<br><img src="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/8.png?raw=true" width="1000" height="500/"></p>
<blockquote>
<p>sudo ssserver -p 443 -k password -m rc4-md5 –user nobody -d start</p>
</blockquote>
<p>接着我们要让我们的shadowsocks在vps的后台跑起来，要执行<code>sudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start</code>，<strong>注意</strong>password是你要设定的密码，443为端口号，rc4-md5为加密方式，除了密码，其余的都可以不用改，出现如下信息为成功开启。<br><img src="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/9.png?raw=true" width="1000" height="500/"></p>
<p>#设置客户端</p>
<p>###windows系统<br><a href="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/Shadowsocks-win-2.5.6.zip?raw=true" target="_blank" rel="external">windows客户端</a></p>
<p>点击打开客户端，输入我们搭建shadowsocks时输入的参数，包括vps的ip、端口号<code>443</code>、密码，加密方式<code>rc4-md5</code>，代理端口为<code>1080</code>不用改。如果你全部按照我的教程来的话，只有你自己设置的密码才需要和我不一样。<br><img src="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/16.png?raw=true" width="1000" height="400/"><br>接着右键屏幕右下角shadowsocks客户端的小图标，点击<code>启用系统代理</code>，现在我们在浏览器用谷歌搜索，已经能用了！不够我们还需要设置一些东西，访问我们国内的网站，就不必经过shadowsocks了，所以我们右键小图标，在<code>系统代理模式</code>中选择<code>PAC模式</code>，在<code>PAC</code>中选择<code>使用本地PAC</code>并点击<code>从GFWList更新本地PAC</code>，现在，我们就能愉快的上谷歌了！</p>
<p>###mac系统<br><a href="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/ShadowsocksX-2.6.3.dmg?raw=true" target="_blank" rel="external">mac客户端</a><br>点击打开客户端，点击右上角shadowsocks，在服务器中打开服务器设定，输入我们搭建shadowsocks时输入的参数，包括vps的ip、端口号<code>443</code>、密码，加密方式<code>rc4-md5</code>。如果你全部按照我的教程来的话，只有你自己设置的密码才需要和我不一样。<br><img src="https://github.com/fflamingogo/fflamingogo.github.io/blob/master/myimage/17.png?raw=true" width="1000" height="400/"><br>选择<code>自动代理模式</code>，点击<code>从GFWList更新本地PAC</code>然后<code>打开shadowsocks</code>，完成设置。</p>
<p>#总结</p>
<p>恭喜你，通过以上的步骤，你已经搭建起了通往世界的大门，如果觉得我的教程帮助了你，你可以拿起你的手机扫一扫二维码。</p>
<p><img src="https://raw.githubusercontent.com/fflamingogo/fflamingogo.github.io/master/myimage/wx.jpg" width="300" height="300" alt="图片名称" align="center/"></p>
<p><img src="https://raw.githubusercontent.com/fflamingogo/fflamingogo.github.io/master/myimage/%E6%94%AF%E4%BB%98%E5%AE%9D.jpg" width="300" height="300" alt="图片名称" align="center/"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>作为Android开发工程师，你是不是有以下的经历：</p>
<ul>
<li>无法访问谷歌</li>
<li>无法访问Android官网</li>
<li>Android studio更新各种失败</li>
<li>导入谷歌的库各种失败</li>
</ul>
<p>一切原因都是你身处大局域网中，你可能通过某种方法，暂时解决了以上的问题，但是还是很不顺心，这里，我不单要帮你解决以上的问题，还要带你看看世界。</p>]]>
    
    </summary>
    
      <category term="vps" scheme="fflamingogo.xyz/tags/vps/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[getChildMeasureSpec源码分析]]></title>
    <link href="fflamingogo.xyz/2015/10/02/getChildMeasureSpec%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>fflamingogo.xyz/2015/10/02/getChildMeasureSpec源码分析/</id>
    <published>2015-10-02T15:35:22.000Z</published>
    <updated>2015-10-03T10:13:07.000Z</updated>
    <content type="html"><![CDATA[<p>我们知道<code>子View</code>的宽高是由<code>父View</code>决定的，这就是为什么在<code>xml</code>写布局的时候，我们设置<code>View</code>的宽高是<code>layout_width</code>而不是直接<code>width</code>。<code>父View</code>的属性会传向<code>子View</code>，从中去影响<code>子View</code>的宽高，现在我们就来看看源码中，他是怎么运作起来的。</p>
<a id="more"></a>
<p><code>父View</code>就是我们熟悉的<code>ViewGroup</code>来充当，在<code>ViewGroup</code>的源码中，发现了<code>measureChildren</code>这个方法，从名字我们就能判断它是用来测量<code>子View</code>的宽高的，源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Ask all of the children of this view to measure themselves, taking into</span><br><span class="line"> * account both the MeasureSpec requirements for this view and its padding.</span><br><span class="line"> * We skip children that are in the GONE state The heavy lifting is done in</span><br><span class="line"> * getChildMeasureSpec.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> widthMeasureSpec The width requirements for this view</span><br><span class="line"> * <span class="doctag">@param</span> heightMeasureSpec The height requirements for this view</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChildren</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = mChildrenCount;</span><br><span class="line">    <span class="keyword">final</span> View[] children = mChildren;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        <span class="keyword">final</span> View child = children[i];</span><br><span class="line">        <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</span><br><span class="line">            measureChild(child, widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以很容易就看出，这个方法遍历了<code>ViewGroup</code>的<code>子View</code>，然后调用的<code>measureChild</code>，<code>ViewGroup</code>的<code>MeasureSpec</code>被传入每个<code>子View</code>中，继续跟进<code>measureChild</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Ask one of the children of this view to measure itself, taking into</span><br><span class="line"> * account both the MeasureSpec requirements for this view and its padding.</span><br><span class="line"> * The heavy lifting is done in getChildMeasureSpec.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> child The child to measure</span><br><span class="line"> * <span class="doctag">@param</span> parentWidthMeasureSpec The width requirements for this view</span><br><span class="line"> * <span class="doctag">@param</span> parentHeightMeasureSpec The height requirements for this view</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChild</span><span class="params">(View child, <span class="keyword">int</span> parentWidthMeasureSpec,</span><br><span class="line">        <span class="keyword">int</span> parentHeightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> LayoutParams lp = child.getLayoutParams();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</span><br><span class="line">            mPaddingLeft + mPaddingRight, lp.width);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</span><br><span class="line">            mPaddingTop + mPaddingBottom, lp.height);</span><br><span class="line"></span><br><span class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出<code>getChildMeasureSpec</code>就是通过<code>父View</code>的<code>MeasureSpec</code>得到<code>View``MeasureSpec</code>的方法，要分析的正是这个方法，源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Does the hard part of measureChildren: figuring out the MeasureSpec to</span><br><span class="line"> * pass to a particular child. This method figures out the right MeasureSpec</span><br><span class="line"> * for one dimension (height or width) of one child view.</span><br><span class="line"> *</span><br><span class="line"> * The goal is to combine information from our MeasureSpec with the</span><br><span class="line"> * LayoutParams of the child to get the best possible results. For example,</span><br><span class="line"> * if the this view knows its size (because its MeasureSpec has a mode of</span><br><span class="line"> * EXACTLY), and the child has indicated in its LayoutParams that it wants</span><br><span class="line"> * to be the same size as the parent, the parent should ask the child to</span><br><span class="line"> * layout given an exact size.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> spec The requirements for this view</span><br><span class="line"> * <span class="doctag">@param</span> padding The padding of this view for the current dimension and</span><br><span class="line"> *        margins, if applicable</span><br><span class="line"> * <span class="doctag">@param</span> childDimension How big the child wants to be in the current</span><br><span class="line"> *        dimension</span><br><span class="line"> * <span class="doctag">@return</span> a MeasureSpec integer for the child</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getChildMeasureSpec</span><span class="params">(<span class="keyword">int</span> spec, <span class="keyword">int</span> padding, <span class="keyword">int</span> childDimension)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(spec);</span><br><span class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(spec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size = Math.max(<span class="number">0</span>, specSize - padding);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> resultSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> resultMode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">    <span class="comment">// Parent has imposed an exact size on us</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size. So be it.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can't be</span></span><br><span class="line">            <span class="comment">// bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parent has imposed a maximum size on us</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Child wants a specific size... so be it</span></span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size, but our size is not fixed.</span></span><br><span class="line">            <span class="comment">// Constrain child to not be bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can't be</span></span><br><span class="line">            <span class="comment">// bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parent asked to see how big we want to be</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Child wants a specific size... let him have it</span></span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size... find out how big it should</span></span><br><span class="line">            <span class="comment">// be</span></span><br><span class="line">            resultSize = <span class="number">0</span>;</span><br><span class="line">            resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size.... find out how</span></span><br><span class="line">            <span class="comment">// big it should be</span></span><br><span class="line">            resultSize = <span class="number">0</span>;</span><br><span class="line">            resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们先在<strong>Android官方文档</strong>查查<code>case</code>的三种类型是什么意思</p>
<ul>
<li><code>UNSPECIFIED</code>（大小可以任意设置，据说这个不常用到）<br>The parent has not imposed any constraint on the child. It can be whatever size it wants.</li>
<li><code>EXACTLY</code><br>The parent has determined an exact size for the child. The child is going to be given those bounds regardless of how big it wants to be.</li>
<li><code>AT_MOST</code><br>The child can be as large as it wants up to the specified size.</li>
</ul>
<p>首先<code>childDimension</code>是啥？它传入的是<code>子View</code>的<code>LayoutParams</code>属性的宽高，<code>WRAP_CONTENT = -2</code>，<code>MATCH_PARENT = -1</code>，也就是说<code>childDimension &gt;= 0</code>的话，<code>childDimension</code>是我们给的固定dp。</p>
<p>可以看出，无论<code>父View</code>是什么<code>Mode</code>，<code>子View</code>有固定高度dp的话，<code>resultSize</code>都是<code>子View</code>的<code>childDimension</code>，并且<code>子View</code>的<code>Mode</code>也是<code>EXACTLY</code>的。</p>
<p>当<code>父View</code>的<code>Mode</code>为<code>EXACTLY</code>，<code>子View</code>为<code>MATCH_PARENT</code>，也就是和<code>父View</code>一样的<code>Size</code>，并且固定了。<code>子View</code>为<code>WRAP_CONTENT</code>，它的大小由自己决定，但是<code>Size</code>最大等于<code>父View</code>，<code>Mode</code>是<code>AT_MOST</code>。</p>
<p>当<code>父View</code>的<code>Mode</code>为<code>AT_MOST</code>，<code>子View</code>为<code>MATCH_PARENT</code>，想要和<code>父View</code>一样的<code>Size</code>，但是<code>父View</code>并没有固定，所以大小还是自己决定，但不能超过<code>父View</code>的大小。</p>
<p>最后调用<code>MeasureSpec.makeMeasureSpec</code>生成<code>子View</code>的<code>MeasureSpec</code>返回。</p>
<p><img src="https://raw.githubusercontent.com/fflamingogo/fflamingogo.github.io/master/myimage/wx.jpg" width="300" height="300" alt="图片名称" align="center/"></p>
<p><img src="https://raw.githubusercontent.com/fflamingogo/fflamingogo.github.io/master/myimage/%E6%94%AF%E4%BB%98%E5%AE%9D.jpg" width="300" height="300" alt="图片名称" align="center/"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们知道<code>子View</code>的宽高是由<code>父View</code>决定的，这就是为什么在<code>xml</code>写布局的时候，我们设置<code>View</code>的宽高是<code>layout_width</code>而不是直接<code>width</code>。<code>父View</code>的属性会传向<code>子View</code>，从中去影响<code>子View</code>的宽高，现在我们就来看看源码中，他是怎么运作起来的。</p>]]>
    
    </summary>
    
      <category term="View" scheme="fflamingogo.xyz/tags/View/"/>
    
      <category term="源码分析" scheme="fflamingogo.xyz/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Android" scheme="fflamingogo.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MeasureSpec源码分析]]></title>
    <link href="fflamingogo.xyz/2015/09/20/MeasureSpec%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>fflamingogo.xyz/2015/09/20/MeasureSpec源码分析/</id>
    <published>2015-09-20T09:38:17.000Z</published>
    <updated>2015-10-02T15:36:33.000Z</updated>
    <content type="html"><![CDATA[<p>在看<code>View</code>源码时，经常会遇到<code>MeasureSpec</code>这个类，它一层层从<code>parent</code>传向<code>childview</code>，不去了解，还真不知道他是个啥，源码如下：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MeasureSpec</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_SHIFT = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_MASK  = <span class="number">0x3</span> &lt;&lt; MODE_SHIFT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Measure specification mode: The parent has not imposed any constraint</span><br><span class="line">     * on the child. It can be whatever size it wants.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNSPECIFIED = <span class="number">0</span> &lt;&lt; MODE_SHIFT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Measure specification mode: The parent has determined an exact size</span><br><span class="line">     * for the child. The child is going to be given those bounds regardless</span><br><span class="line">     * of how big it wants to be.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXACTLY     = <span class="number">1</span> &lt;&lt; MODE_SHIFT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Measure specification mode: The child can be as large as it wants up</span><br><span class="line">     * to the specified size.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AT_MOST     = <span class="number">2</span> &lt;&lt; MODE_SHIFT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Creates a measure specification based on the supplied size and mode.</span><br><span class="line">     *</span><br><span class="line">     * The mode must always be one of the following:</span><br><span class="line">     * &lt;ul&gt;</span><br><span class="line">     *  &lt;li&gt;&#123;<span class="doctag">@link</span> android.view.View.MeasureSpec#UNSPECIFIED&#125;&lt;/li&gt;</span><br><span class="line">     *  &lt;li&gt;&#123;<span class="doctag">@link</span> android.view.View.MeasureSpec#EXACTLY&#125;&lt;/li&gt;</span><br><span class="line">     *  &lt;li&gt;&#123;<span class="doctag">@link</span> android.view.View.MeasureSpec#AT_MOST&#125;&lt;/li&gt;</span><br><span class="line">     * &lt;/ul&gt;</span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; On API level 17 and lower, makeMeasureSpec's</span><br><span class="line">     * implementation was such that the order of arguments did not matter</span><br><span class="line">     * and overflow in either value could impact the resulting MeasureSpec.</span><br><span class="line">     * &#123;<span class="doctag">@link</span> android.widget.RelativeLayout&#125; was affected by this bug.</span><br><span class="line">     * Apps targeting API levels greater than 17 will get the fixed, more strict</span><br><span class="line">     * behavior.&lt;/p&gt;</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> size the size of the measure specification</span><br><span class="line">     * <span class="doctag">@param</span> mode the mode of the measure specification</span><br><span class="line">     * <span class="doctag">@return</span> the measure specification based on size and mode</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">makeMeasureSpec</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sUseBrokenMakeMeasureSpec) &#123;</span><br><span class="line">            <span class="keyword">return</span> size + mode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (size &amp; ~MODE_MASK) | (mode &amp; MODE_MASK);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Extracts the mode from the supplied measure specification.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> measureSpec the measure specification to extract the mode from</span><br><span class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> android.view.View.MeasureSpec#UNSPECIFIED&#125;,</span><br><span class="line">     *         &#123;<span class="doctag">@link</span> android.view.View.MeasureSpec#AT_MOST&#125; or</span><br><span class="line">     *         &#123;<span class="doctag">@link</span> android.view.View.MeasureSpec#EXACTLY&#125;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMode</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (measureSpec &amp; MODE_MASK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Extracts the size from the supplied measure specification.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> measureSpec the measure specification to extract the size from</span><br><span class="line">     * <span class="doctag">@return</span> the size in pixels defined in the supplied measure specification</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (measureSpec &amp; ~MODE_MASK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>mode总共有三种类型，<code>UNSPECIFIED</code>，<code>EXACTLY</code>，<code>AT_MOST</code>，然而它们都都位移了<code>MODE_SHIFT</code>位，即30位，</p>
<ul>
<li><p>UNSPECIFIED=0，二进制00，左移30位后 00 00 0000 0000 0000 0000 0000 0000 0000</p>
</li>
<li><p>EXACTLY=1，二进制01，左移30位后 01 00 0000 0000 0000 0000 0000 0000 0000</p>
</li>
<li><p>AT_MOST=2，二进制10，左移30位后 10 00 0000 0000 0000 0000 0000 0000 0000</p>
</li>
<li><p>MODE_MASK=0x3，0x看出它是个十六进制，二进制11，左移30位后 11 00 0000 0000 0000 0000 0000 0000 0000，然而它并不是类型中的一种，它别有用途</p>
</li>
</ul>
<p>在<code>makeMeasureSpec</code>里，<code>sUseBrokenMakeMeasureSpec</code>默认<strong>false</strong>，会return<code>(size &amp; ~MODE_MASK) | (mode &amp; MODE_MASK)</code>，下面来复习下位运算。</p>
<ul>
<li><p>~：是取反，MODE_MASK取反后，00 11 1111 1111 1111 1111 1111 1111 1111</p>
</li>
<li><p>&amp;：相同位的两个数字都为1，则为1；若有一个不为1，则为0。<strong>x&amp;0=0</strong>，说白了，size &amp; ~MODE_MASK的前两位会被抹为0，后30位不变，(mode &amp; MODE_MASK)前2位不变，后30位抹为0。</p>
</li>
<li><p>|：相同位不同则为1，相同则为0。<strong>x|0=x</strong>,说白了，mode 0|0 size=mode size，这就组成了一个MeasureSpec了。</p>
</li>
</ul>
<p>#总结</p>
<p>可见<code>MeasureSpec</code>是一个32位的int，用来保存数据，前2位为mode，后30位为size。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在看<code>View</code>源码时，经常会遇到<code>MeasureSpec</code>这个类，它一层层从<code>parent</code>传向<code>childview</code>，不去了解，还真不知道他是个啥，源码如下：</p>]]>
    
    </summary>
    
      <category term="View" scheme="fflamingogo.xyz/tags/View/"/>
    
      <category term="源码分析" scheme="fflamingogo.xyz/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Android" scheme="fflamingogo.xyz/categories/Android/"/>
    
  </entry>
  
</feed>
